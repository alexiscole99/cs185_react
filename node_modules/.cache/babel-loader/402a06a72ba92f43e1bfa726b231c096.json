{"ast":null,"code":"var _jsxFileName = \"/Users/alexiscole/Documents/cs185/cs185_react/src/components/ZoomManager/Zoom.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './Zoom.css';\nimport Tasks from './Tasks';\nimport AddTask from './AddTask';\nimport Header from './Header';\nimport UpdateTask from './UpdateTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Zoom = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [showFullSchedule, setShowFullSchedule] = useState(true);\n  const [showUpdate, setShowUpdate] = useState(false);\n  const [updateId, setUpdateId] = useState(\"\");\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    console.log(data);\n    return data;\n  };\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  const updateTask = async ({\n    title,\n    day,\n    important,\n    textInfor\n  }) => {\n    const taskToToggle = await fetchTask(updateId);\n    const updTask = { ...taskToToggle,\n      important: !taskToToggle.important\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${updateId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === updateId ? {\n      updateId,\n      title,\n      day,\n      important,\n      textInfor\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"zoom-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showFullSchedule: showFullSchedule,\n      setShowFullSchedule: () => setShowFullSchedule(!showFullSchedule),\n      setShowUpdate: () => setShowUpdate(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), !showFullSchedule && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 35\n    }, this), showFullSchedule && (tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onUpdate: setUpdateId,\n      showUpdate: showUpdate,\n      setShowUpdate: () => setShowUpdate(!showUpdate)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this) : \"No available Meetings\"), showUpdate && /*#__PURE__*/_jsxDEV(UpdateTask, {\n      onAdd: updateTask,\n      fetchTask: fetchTask,\n      setShowUpdate: () => setShowUpdate(!showUpdate),\n      updateId: updateId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Zoom, \"aP5CVaUtwLM8dUzCowvy9utiBtU=\");\n\n_c = Zoom;\nexport default Zoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Zoom\");","map":{"version":3,"sources":["/Users/alexiscole/Documents/cs185/cs185_react/src/components/ZoomManager/Zoom.js"],"names":["useState","useEffect","Tasks","AddTask","Header","UpdateTask","Zoom","tasks","setTasks","showFullSchedule","setShowFullSchedule","showUpdate","setShowUpdate","updateId","setUpdateId","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","console","log","fetchTask","id","deleteTask","method","filter","task","addTask","headers","body","JSON","stringify","updateTask","title","day","important","textInfor","taskToToggle","updTask","map","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport './Zoom.css';\nimport Tasks from './Tasks';\nimport AddTask from './AddTask';\nimport Header from './Header';\nimport UpdateTask from './UpdateTask';\n\nconst Zoom = () => {\n    const [tasks, setTasks] = useState([])\n    const [showFullSchedule, setShowFullSchedule] = useState(true)\n    const [showUpdate, setShowUpdate] = useState(false)\n    const [updateId, setUpdateId] = useState(\"\")\n\n    useEffect(() => {\n        const getTasks = async () => {\n            const tasksFromServer = await fetchTasks()\n            setTasks(tasksFromServer)\n        }\n        getTasks()\n    }, [])\n\n    const fetchTasks = async () => {\n        const res = await fetch('http://localhost:5000/tasks')\n        const data = await res.json()\n        console.log(data)\n        return data\n    }\n\n    const fetchTask = async (id) => {\n        const res = await fetch(`http://localhost:5000/tasks/${id}`)\n        const data = await res.json()\n        return data\n    }\n\n    const deleteTask = async (id) => {\n        const res = await fetch(`http://localhost:5000/tasks/${id}`, {method:'DELETE'})\n        setTasks(tasks.filter((task) => task.id !== id))\n    }\n\n    const addTask = async (task) => {\n        const res = await fetch('http://localhost:5000/tasks', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(task),\n        })\n        const data = await res.json()\n        setTasks([...tasks, data])\n    }\n\n    const updateTask = async ({title, day, important, textInfor}) => {\n        const taskToToggle = await fetchTask(updateId)\n        const updTask = { ...taskToToggle, important: !taskToToggle.important}\n        const res = await fetch(`http://localhost:5000/tasks/${updateId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(updTask),\n        })\n        const data = await res.json()\n        setTasks(\n            tasks.map((task) =>\n                task.id === updateId ? { updateId, title, day, important, textInfor} : task\n            )\n        )\n    }\n\n    return (\n        <div className='zoom-container'>\n            <Header showFullSchedule={showFullSchedule} \n            setShowFullSchedule={() => setShowFullSchedule(!showFullSchedule)}\n            setShowUpdate={() => setShowUpdate(false)}/>\n            {!showFullSchedule && <AddTask onAdd={addTask}/>}\n            {showFullSchedule && (tasks.length > 0 ? \n            <Tasks tasks={tasks} onDelete={deleteTask} onUpdate={setUpdateId} \n            showUpdate={showUpdate} setShowUpdate={() => setShowUpdate(!showUpdate)}/> :\n            \"No available Meetings\")}\n            {showUpdate && <UpdateTask onAdd={updateTask} fetchTask={fetchTask}\n            setShowUpdate={() => setShowUpdate(!showUpdate) } updateId={updateId}/>}\n        </div>\n\n    )\n}\n\nexport default Zoom"]},"metadata":{},"sourceType":"module"}